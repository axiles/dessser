# Configuration

VERSION = @PACKAGE_VERSION@

OCAMLFIND_COMMANDS = ocamlc=metaocamlc ocamlopt=metaocamlopt
OCAMLOPT = OCAMLFIND_COMMANDS='$(OCAMLFIND_COMMANDS)' OCAMLPATH='$(OCAMLPATH)' OCAMLRUNPARAM= ocamlfind ocamlopt
OCAMLC   = OCAMLFIND_COMMANDS='$(OCAMLFIND_COMMANDS)' OCAMLPATH='$(OCAMLPATH)' OCAMLRUNPARAM= ocamlfind ocamlc
OCAMLDEP = OCAMLFIND_COMMANDS='$(OCAMLFIND_COMMANDS)' OCAMLPATH='$(OCAMLPATH)' OCAMLRUNPARAM= ocamlfind ocamldep
CPPO = cppo
QTEST = qtest
WARNS = -w -40-58+27

OCAMLOPTFLAGS = @OCAMLOPTFLAGS@ $(WARNS) -annot
OCAMLCFLAGS =   @OCAMLCFLAGS@   $(WARNS)

ifdef NDEBUG
OCAMLOPTFLAGS += -noassert -O2
else
OCAMLOPTFLAGS += -g
endif

PACKAGES = \
	batteries stdint

META_REQUIRES = \
	findlib $(PACKAGES)

INSTALLED_LIB = \
	ber/dessert.cmxa \
	ber/dessert.cma \
	direct/dessert.cmxa \
	direct/dessert.cma \
	$(filter %.cmi, $(LIBBERDESSERT_SOURCES:.ml=.cmi)) \
	$(filter %.cmx, $(LIBBERDESSERT_SOURCES:.ml=.cmx)) \
	$(filter %.cmo, $(LIBBERDESSERT_SOURCES:.ml=.cmo))

INSTALLED = $(INSTALLED_LIB) META

prefix = @prefix@
exec_prefix = @exec_prefix@
bindir ?= @bindir@

all: $(INSTALLED) examples

# Generic rules

.SUFFIXES: .ml .mli .mlo .cmi .cmx .cmo .cmt .html .adoc
.PHONY: \
  clean distclean all dep doc examples \
  check unit-check \
  install uninstall reinstall

%.cmi: %.mli
	@echo 'Compiling $@ (interface)'
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -I $(dir $@) -package '$(PACKAGES)' -c $<

%.cmx %.cmt: %.ml
	@echo 'Compiling $@'
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -I $(dir $@) -package '$(PACKAGES)' -c $<

%.cmo: %.ml
	@echo 'Compiling $@'
	$(OCAMLC) $(OCAMLCFLAGS) -I $(dir $@) -package '$(PACKAGES)' -c $<

%.ml: %.mlo
	@echo "Preprocessing $@"
	$(CPPO) $< -o $@

# Documentation

%.html: %.adoc
	@echo 'Building documentation $@'
	asciidoc -a data-uri -a icons -a toc -a max-width=55em --theme volnitsky -o $@ $<

doc:

LIBBERDESSERT_SOURCES = \
	ber/Helpers.ml \
	ber/MyLifts.ml \
	ber/SerDataBytes0.ml \
	ber/SerDataBytes.ml \
	ber/IntRepr.ml \
	ber/Dessert.ml \
	ber/SExpr.ml \
	ber/RowBinary.ml \
	ber/DevNull.ml

LIBDIRECTDESSERT_SOURCES = \
	direct/Dessert.ml \
	direct/SExpr.ml \
	direct/RowBinary.ml \
	direct/DevNull.ml \
	direct/BackEndCPP.ml

EXAMPLES_SOURCES = \
	examples/direct_hard_coded.ml \
	examples/manual_codegen.ml

TESTONLY_SOURCES =

SOURCES = $(sort \
	$(LIBBERDESSERT_SOURCES) \
	$(LIBDIRECTDESSERT_SOURCES) \
	$(EXAMPLES_SOURCES) \
	$(TESTONLY_SOURCES) \
)

# Dependencies

dep:
	@$(RM) .depend
	@$(MAKE) .depend

.depend: $(SOURCES)
	@$(OCAMLDEP) -I ber -package '$(PACKAGES)' $(filter %.ml, $(LIBBERDESSERT_SOURCES)) $(filter %.mli, $(LIBBERDESSERT_SOURCES)) > $@
	@$(OCAMLDEP) -I direct -package '$(PACKAGES)' $(filter %.ml, $(LIBDIRECTDESSERT_SOURCES)) $(filter %.mli, $(LIBDIRECTDESSERT_SOURCES)) >> $@

include .depend

# Compile dessert lib

ber/dessert.cmxa: $(LIBBERDESSERT_SOURCES:.ml=.cmx)
	@echo 'Linking runtime library $@ (native)'
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -I ber -a $(filter %.cmx, $^) -o $@

ber/dessert.cma: $(LIBBERDESSERT_SOURCES:.ml=.cmo)
	@echo 'Linking runtime library $@ (bytecode)'
	$(OCAMLC) $(OCAMLCFLAGS) -I ber -a $(filter %.cmo, $^) -o $@

ber/dessert.a: ber/dessert.cmxa

ber/IntRepr.ml: ber/IntReprOCaml.ml
	ln -f $< $@

direct/dessert.cmxa: $(LIBDIRECTDESSERT_SOURCES:.ml=.cmx)
	@echo 'Linking runtime library $@ (native)'
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -I direct -a $(filter %.cmx, $^) -o $@

direct/dessert.cma: $(LIBDIRECTDESSERT_SOURCES:.ml=.cmo)
	@echo 'Linking runtime library $@ (bytecode)'
	$(OCAMLC) $(OCAMLCFLAGS) -I direct -a $(filter %.cmo, $^) -o $@

direct/dessert.a: direct/dessert.cmxa

# Compile examples

examples: $(EXAMPLES_SOURCES:%.ml=%.opt)

examples/direct_hard_coded.opt: ber/dessert.cmxa examples/direct_hard_coded.ml
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -I ber -linkpkg -package '$(PACKAGES)' $^ -o $@

examples/direct_hard_coded.byte: ber/dessert.cma examples/direct_hard_coded.ml
	$(OCAMLC) $(OCAMLCFLAGS) -I ber -linkpkg -package '$(PACKAGES) dynlink' $^ -o $@

# Compile another exxperiment

examples/manual_codegen.opt: direct/dessert.cmxa examples/manual_codegen.ml
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -I direct -linkpkg -package '$(PACKAGES)' $^ -o $@

# Generated sources

META:
	@echo 'Building findlib configuration (META) for Ramen'
	@echo 'description = "Event processor tailored for small-scale monitoring"' > $@
	@echo 'version = "$(VERSION)"' >> $@
	@echo 'archive(native) = "dessert.cmxa"' >> $@
	@echo 'archive(byte) = "dessert.cma"' >> $@
	@echo 'requires = "$(META_REQUIRES)"' >> $@

# Installation

install: $(INSTALLED)
	ocamlfind install dessert $(INSTALLED_LIB) META

uninstall: uninstall-bundle
	@ocamlfind remove dessert

reinstall: uninstall install

# Packaging

# Cleaning

clean:
	@echo 'Cleaning'
	@$(RM) ber/*.s ber/*.annot ber/*.cmt ber/*.cmti ber/*.o ber/*.opt ber/*.byte
	@$(RM) ber/*.cmx ber/*.cmo ber/*.cmxa ber/*.cma ber/*.cmxs ber/*.cmi ber/*.a
	@$(RM) direct/*.s direct/*.annot direct/*.cmt direct/*.cmti direct/*.o direct/*.opt direct/*.byte
	@$(RM) direct/*.cmx direct/*.cmo direct/*.cmxa direct/*.cma direct/*.cmxs direct/*.cmi direct/*.a
	@$(RM) examples/*.s examples/*.annot examples/*.cmt examples/*.cmti examples/*.o examples/*.opt examples/*.byte
	@$(RM) examples/*.cmx examples/*.cmo examples/*.cmxa examples/*.cma examples/*.cmxs examples/*.cmi examples/*.a
	@$(RM) *.opt perf.data* gmon.out
	@$(RM) ber/IntRepr.ml ber/IntReprOCaml.ml

distclean: clean
	@echo 'Cleaning all build files'
	@$(RM) META
