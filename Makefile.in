# Configuration

VERSION = @PACKAGE_VERSION@

OCAMLOPT = OCAMLRUNPARAM= ocamlfind ocamlopt
OCAMLC   = OCAMLRUNPARAM= ocamlfind ocamlc
OCAMLDEP = OCAMLRUNPARAM= ocamlfind ocamldep
CPPO = cppo
QTEST = qtest
WARNS = -w -40-58+27

OCAMLOPTFLAGS = @OCAMLOPTFLAGS@ $(WARNS) -annot
OCAMLCFLAGS =   @OCAMLCFLAGS@   $(WARNS)

CFLAGS   += -std=gnu11 -Wall -W -Wno-parentheses -fPIC
CPPFLAGS += -D_GNU_SOURCE \
            -I '@OCAMLLIB@' \
            -I '$(shell ocamlfind query stdint)'

ifdef NDEBUG
OCAMLOPTFLAGS += -noassert -O2
CPPFLAGS += -DNDEBUG
CFLAGS += -O3
else
OCAMLOPTFLAGS += -g
CPPFLAGS += -g
CFLAGS += -O0
endif

PACKAGES = \
	batteries,dynlink,parsercombinator,stdint,qcheck

META_REQUIRES = \
	findlib,$(PACKAGES)

INSTALLED_BIN = \
	src/dessserc

INSTALLED_LIB = \
	dessser.cmxa \
	dessser.cma \
	dessser.a \
	$(filter %.cmi, $(LIBDESSSER_SOURCES:.ml=.cmi)) \
	$(filter %.cmx, $(LIBDESSSER_SOURCES:.ml=.cmx)) \
	$(filter %.cmo, $(LIBDESSSER_SOURCES:.ml=.cmo)) \
	src/libdessser_ext.a

INSTALLED_HEADERS = \
	src/dessser/Bytes.h \
	src/dessser/Map.h \
	src/dessser/Mask.h \
	src/dessser/Pointer.h \
	src/dessser/Lst.h \
	src/dessser/runtime.h \
	src/dessser/SList.h \
	src/dessser/typedefs.h \
	src/dessser/Vec.h

INSTALLED = \
	$(INSTALLED_LIB) \
	$(INSTALLED_HEADERS) \
	$(INSTALLED_BIN) \
	META

prefix = @prefix@
exec_prefix = @exec_prefix@
bindir ?= @bindir@

all: $(INSTALLED) examples

# Generic rules

.SUFFIXES: .ml .mli .mlo .cmi .cmx .cmo .cmt .html .adoc
.PHONY: \
  clean distclean all dep doc examples \
  check unit-check quick-check slow-check examples-check cpp-check \
  aggregator-simplest-check aggregator-sets-check \
  install uninstall reinstall

%.cmi: %.mli
	@echo 'Compiling $@ (interface)'
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -I $(dir $@) -package '$(PACKAGES)' -c $<

%.cmx %.cmt: %.ml
	@echo 'Compiling $@'
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -I $(dir $@) -package '$(PACKAGES)' -c $<

%.cmo: %.ml
	@echo 'Compiling $@'
	$(OCAMLC) $(OCAMLCFLAGS) -I $(dir $@) -package '$(PACKAGES)' -c $<

%.ml: %.mlo
	@echo "Preprocessing $@"
	$(CPPO) $< -o $@

# Documentation

%.html: %.adoc
	@echo 'Building documentation $@'
	asciidoc -a data-uri -a icons -a toc -a max-width=55em --theme volnitsky -o $@ $<

doc:

# FIXME: have a separate libdessser_runtime.cmxa with only the runtime
# dependencies, namely DessserFloatTools and DessserOCamlBackEndHelpers
LIBDESSSER_SOURCES = \
	src/DessserTools.ml \
	src/DessserFloatTools.ml \
	src/DessserIpTools.ml \
	src/DessserCompilConfig.ml \
	src/DessserMiscTypes.ml \
	src/DessserTypes.ml \
	src/DessserExpressions.ml \
	src/DessserPath.ml \
	src/DessserConversions.ml \
	src/DessserEval.ml \
	src/DessserStdLib.ml \
	src/DessserMasks.ml \
	src/DessserPrinter.ml \
	src/DessserCompilationUnit.ml \
	src/Dessser.ml \
	src/DessserDSTools_FragmentsCPP.ml \
	src/DessserDSTools_FragmentsOCaml.ml \
	src/DessserDSTools.ml \
	src/DessserSExpr.ml \
	src/DessserCsv.ml \
	src/DessserRowBinary.ml \
	src/DessserRamenRingBuffer.ml \
	src/DessserDevNull.ml \
	src/DessserBackEndDIL.ml \
	src/DessserBackEndCLike.ml \
	src/DessserBackEndCPP.ml \
	src/DessserBackEndOCaml.ml \
	src/DessserHeapValue.ml \
	src/DessserLeftistHeap.ml \
	src/DessserOCamlBackEndHelpers.ml \
	src/DessserQCheck.ml \
	src/dessser_ocaml_ext_pointer.c

EXAMPLES_SOURCES = \
	examples/simplest.ml \
	examples/manual_codegen.ml

TESTONLY_SOURCES =

SOURCES = $(sort \
	$(LIBDESSSER_SOURCES) \
	$(EXAMPLES_SOURCES) \
	$(TESTONLY_SOURCES) \
)

# Dependencies

dep:
	@$(RM) .depend
	@$(MAKE) .depend

.depend: $(SOURCES)
	@$(OCAMLDEP) -I src -package '$(PACKAGES)' $(filter %.ml, $(LIBDESSSER_SOURCES)) $(filter %.mli, $(LIBDESSSER_SOURCES)) >> $@
	@for f in $(filter %.c, $(SOURCES)); do \
	  $(CC) $(CFLAGS) $(CPPFLAGS) -MM -MT "$$(dirname $$f)/$$(basename $$f .c).o" $$f >> $@; \
	done

include .depend

# Compile dessser lib

src/dessser.cmxa: \
		$(filter %.cmx, $(LIBDESSSER_SOURCES:.ml=.cmx)) \
		src/libdessser_ext.a
	@echo 'Linking runtime library $@ (native)'
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -linkall -I src -a -cclib -ldessser_ext $(filter %.cmx, $^) -o $@

src/dessser.cma: \
		$(filter %.cmo, $(LIBDESSSER_SOURCES:.ml=.cmo)) \
		src/libdessser_ext.a
	@echo 'Linking runtime library $@ (bytecode)'
	$(OCAMLC) $(OCAMLCFLAGS) -linkall -I src -a -cclib -ldessser_ext $(filter %.cmo, $^) -o $@

src/libdessser_ext.a: \
		$(filter %.o, $(LIBDESSSER_SOURCES:.c=.o))
	@echo 'Building C hepers library'
	@sleep 1 # ar truncate mtime !?
	@$(AR) rs $@ $^ >/dev/null

src/dessser.a: src/dessser.cmxa

dessser.cmxa: src/dessser.cmxa
	@ln -f $< $@

dessser.cma: src/dessser.cma
	@ln -f $< $@

dessser.a: src/dessser.a
	@ln -f $< $@

# Command line tool

src/dessserc: src/dessser.cmxa src/dessserc.ml
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -I src -linkpkg -package '$(PACKAGES),cmdliner' $^ -o $@

# Compile examples

examples: $(EXAMPLES_SOURCES:%.ml=%.opt)

examples/simplest.opt: src/dessser.cmxa examples/simplest.ml
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -I src -linkpkg -package '$(PACKAGES)' $^ -o $@

examples/manual_codegen.opt: src/dessser.cmxa examples/manual_codegen.ml
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -I src -linkpkg -package '$(PACKAGES)' $^ -o $@

# Generated sources

META: Makefile
	@echo 'Building findlib configuration (META) for Ramen'
	@echo 'description = "(de)serializer generator"' > $@
	@echo 'version = "$(VERSION)"' >> $@
	@echo 'archive(native) = "dessser.cmxa"' >> $@
	@echo 'archive(byte) = "dessser.cma"' >> $@
	@echo 'requires = "$(META_REQUIRES)"' >> $@

src/DessserCompilConfig.ml: Makefile
	@echo '(* Generated by Makefile - edition is futile *)' > $@
	@echo 'let ocaml_version = "@OCAMLVERSION@"' >> $@
	@echo 'let build_path = "$(PATH)"' >> $@
	@echo 'let ocamlpath = "$(OCAMLPATH)"' >> $@
	@echo 'let cpp_compiler = "@CXX@"' >> $@
	@echo 'let build_date = "$(shell date -R)"' >> $@
	@echo 'let build_host = "$(shell hostname)"' >> $@
	@echo 'let version = "$(VERSION)"' >> $@

# Tests

QUICK_TESTABLE_SOURCES = \
	src/DessserTools.ml \
	src/DessserIpTools.ml \
	src/DessserTypes.ml \
	src/DessserExpressions.ml \
	src/DessserPath.ml \
	src/DessserEval.ml \
	src/DessserMasks.ml \
	src/DessserPrinter.ml \
	src/DessserCompilationUnit.ml \
	src/DessserBackEndCPP.ml \
	src/DessserOCamlBackEndHelpers.ml \
	src/DessserCsv.ml

SLOW_TESTABLE_SOURCES = \
	src/DessserQCheck.ml

LINKED_FOR_TESTS = \
	src/DessserTools.ml \
	src/DessserFloatTools.ml \
	src/DessserIpTools.ml \
	src/DessserMiscTypes.ml \
	src/DessserTypes.ml \
	src/DessserExpressions.ml \
	src/DessserPath.ml \
	src/DessserConversions.ml \
	src/DessserEval.ml \
	src/DessserStdLib.ml \
	src/DessserMasks.ml \
	src/DessserPrinter.ml \
	src/DessserCompilationUnit.ml \
	src/Dessser.ml \
	src/DessserDSTools_FragmentsCPP.ml \
	src/DessserDSTools_FragmentsOCaml.ml \
	src/DessserDSTools.ml \
	src/DessserLeftistHeap.ml \
	src/DessserOCamlBackEndHelpers.ml \
	src/DessserBackEndCLike.ml \
	src/DessserBackEndCPP.ml \
	src/DessserBackEndOCaml.ml \
	src/DessserSExpr.ml \
	src/DessserCsv.ml \
	src/DessserRowBinary.ml \
	src/DessserRamenRingBuffer.ml \
	src/DessserHeapValue.ml \
	src/DessserQCheck.ml

src/quick_tests.ml: $(QUICK_TESTABLE_SOURCES)
	@echo 'Generating quick unit tests into $@'
	$(QTEST) --shuffle -o $@ extract $^

src/slow_tests.ml: $(SLOW_TESTABLE_SOURCES)
	@echo 'Generating slow unit tests into $@'
	$(QTEST) --shuffle -o $@ extract $^

quick_tests.opt: \
		src/libdessser_ext.a \
		$(filter %.cmx,$(LINKED_FOR_TESTS:.ml=.cmx)) \
		src/quick_tests.ml
	@echo 'Building unit tests into $@'
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -linkpkg -package $(PACKAGES) -package qcheck -I src $^ -o $@

slow_tests.opt: \
		src/libdessser_ext.a \
		$(filter %.cmx,$(LINKED_FOR_TESTS:.ml=.cmx)) \
		src/slow_tests.ml
	@echo 'Building unit tests into $@'
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -linkpkg -package $(PACKAGES) -package qcheck -I src $^ -o $@

quick-check: quick_tests.opt
	@echo 'Running quick unit tests...'
	@ulimit -n 5000 ;\
	 TZ=CET OCAMLRUNPARAM=b DESSSER_DEV_MODE=1 ./$< -bt

slow-check: slow_tests.opt
	@echo 'Running slow unit tests...'
	@ulimit -n 5000 ;\
	 TZ=CET OCAMLRUNPARAM=b DESSSER_DEV_MODE=1 ./$< -bt

unit-check: quick-check slow-check

examples-check: examples/simplest.opt examples/manual_codegen.opt
	@echo Testing examples
	@ulimit -n 5000 ;\
	 export DESSSER_DEV_MODE=1 ;\
	 examples/simplest.opt ocaml && /tmp/simplest_gen.opt && echo "simplest ocaml OK" && \
	 examples/simplest.opt c++ && /tmp/simplest_gen.exe && echo "simplest c++ OK" && \
	 examples/manual_codegen.opt ocaml && \
	 examples/rowbinary2sexpr.opt < udp_v30.chb > examples/rowbinary2sexpr.opt.out && \
	 diff examples/rowbinary2sexpr.opt.out examples/rowbinary2sexpr.expected && \
	 echo "manual_codegen ocaml OK" && \
	 examples/manual_codegen.opt c++ && \
	 examples/rowbinary2sexpr.exe < udp_v30.chb > examples/rowbinary2sexpr.exe.out && \
	 diff examples/rowbinary2sexpr.exe.out examples/rowbinary2sexpr.expected && \
	 echo "manual_codegen c++ OK"
	@echo SUCCESS

src/cpp_tests: src/cpp_tests.cc src/dessser/runtime.h
	g++ -std=c++17 -g -O0 -W -Wall -I src $< -o $@

cpp-check: src/cpp_tests
	@echo Testing cpp_tests
	@DESSSER_DEV_MODE=1 src/cpp_tests

testdb-dump: src/dessserc
	@echo Generating $@
	@src/dessserc lmdb-dump --input-enc ringbuf --output-enc s-expr \
	                        --language=OCaml --dev-mode \
	                        --value-schema string --key-schema u32 -o $@

testdb-load: src/dessserc
	@echo Generating $@
	@src/dessserc lmdb-load --input-enc s-expr --output-enc ringbuf \
	                        --language=OCaml --dev-mode \
	                        --value-schema string --key-schema u32 -o $@

dump-load-check: testdb-dump testdb-load testdb.dump
	@echo Testing lmdb dump/load
	@ENVNAME=/tmp/testdb ;\
	 rm -rf $$ENVNAME ;\
	 mkdir -p $$ENVNAME ;\
	 export DESSSER_DEV_MODE=1 ;\
	 ./testdb-load --kv-delim : $$ENVNAME < testdb.dump ;\
	 ./testdb-dump --kv-delim : $$ENVNAME | sort > /tmp/testdb.dump ;\
	 diff /tmp/testdb.dump testdb.dump

# Check we can build a simple program that transform its input, in any backend
convert-check: src/dessserc
	@echo Testing converter
	@export DESSSER_DEV_MODE=1 ;\
	 schema='(i32;float;string)'; \
	 ok=yes; \
	 for be in OCaml C++; do \
	   f="$$(mktemp --tmpdir dessser_convert_check_XXXXXX)" &&\
	   src/dessserc converter \
	     --input-enc s-expr --output-enc s-expr -o "$$f" \
	     --language=$$be --dev-mode --schema="$$schema" \
	     -e '/0:(fun 0 "i32" (add (i32 1) (param 0 0)))' \
	     -e '/1:(fun 0 "float" (add (float 0.5) (param 0 0)))' \
	     -e '/2:(fun 0 "string" (upper (param 0 0)))'; \
	   out=$$($$f '(42 0 "foo")'); \
	   exp='(43 0x1p-1 "FOO")'; \
	   if test "$$out" = "$$exp"; then \
	     rm -f "$$f"* ;\
	   else \
	     echo "$$f failed for backend $$be: Expected $$exp but got $$out!" ;\
	     ok=no ;\
	   fi ;\
	 done ;\
	 if test "$$ok" = yes; then echo SUCCESS; else echo FAILURE; exit 1; fi

examples/i32s.csv: Makefile
	@seq 1 10 > $@

aggregator-simplest-check: src/dessserc examples/i32s.csv
	@echo Testing aggregator
	@export DESSSER_DEV_MODE=1 ;\
	 schema='i32'; \
	 ok=yes; \
	 for be in OCaml C++; do \
	   f="$$(mktemp --tmpdir dessser_aggregator_check_XXXXXX)" &&\
	   src/dessserc aggregator \
	     --input-enc csv --output-enc csv -o "$$f" \
	     --language=$$be --dev-mode --schema="$$schema" \
	     --init '(make-vec (i32 0))' \
	     --update '(fun 0 "i32[1]" "i32" (set-vec (u8 0) (param 0 0) (add (get-vec (u8 0) (param 0 0)) (param 0 1))))' \
	     --finalize '(fun 0 "i32[1]" (get-vec (u8 0) (param 0 0)))'; \
	   out=$$($$f -i examples/i32s.csv); \
	   exp='55'; \
	   if test "$$out" = "$$exp"; then \
	     rm -f "$$f"* ;\
	   else \
	     echo "$$f failed for backend $$be: Expected $$exp but got $$out!" ;\
	     ok=no ;\
	   fi ;\
	 done ;\
	 if test "$$ok" = yes; then echo SUCCESS; else echo FAILURE; exit 1; fi

aggregator-sets-check: src/dessserc examples/i32s.csv
	@echo Testing aggregator with sets
	@export DESSSER_DEV_MODE=1 ;\
	 schema='i32'; \
	 ok=yes; \
	 for be in OCaml C++; do \
	   f="$$(mktemp --tmpdir dessser_aggregator_check_XXXXXX)" &&\
	   src/dessserc aggregator \
	     --input-enc csv --output-enc s-expr -o "$$f" \
	     --language=$$be --dev-mode --schema="$$schema" \
	     --init '(sliding-window "i32" (u8 3))' \
	     --update '(fun 0 "i32{sliding}" "i32" (insert (param 0 0) (param 0 1)))' \
	     --finalize '(fun 0 "i32{sliding}" (param 0 0))'; \
	   out=$$($$f -i examples/i32s.csv); \
	   exp='3 (8 9 10)'; \
	   if test "$$out" = "$$exp"; then \
	     rm -f "$$f"* ;\
	   else \
	     echo "$$f failed for backend $$be: Expected $$exp but got $$out!" ;\
	     ok=no ;\
	   fi ;\
	 done ;\
	 if test "$$ok" = yes; then echo SUCCESS; else echo FAILURE; exit 1; fi

check: \
  unit-check examples-check cpp-check dump-load-check convert-check \
  aggregator-simplest-check aggregator-sets-check

# Installation

install: $(INSTALLED)
	ocamlfind install dessser $(INSTALLED)

uninstall:
	ocamlfind remove dessser

reinstall: uninstall install

# Packaging

# Cleaning

clean:
	@echo 'Cleaning'
	@$(RM) src/*.s src/*.annot src/*.cmt src/*.cmti src/*.o src/*.opt src/*.byte
	@$(RM) src/*.cmx src/*.cmo src/*.cmxa src/*.cma src/*.cmxs src/*.cmi src/*.a
	@$(RM) examples/*.s examples/*.annot examples/*.cmt examples/*.cmti examples/*.o examples/*.opt examples/*.byte examples/i32s.csv
	@$(RM) examples/*.cmx examples/*.cmo examples/*.cmxa examples/*.cma examples/*.cmxs examples/*.cmi examples/*.a
	@$(RM) quick_tests.* src/quick_tests.ml slow_tests.* src/slow_tests.ml
	@$(RM) *.opt perf.data* gmon.out .depend
	@$(RM) src/libdessser_ext.a

distclean: clean
	@echo 'Cleaning all build files'
	@$(RM) META DessserCompilConfig.ml
