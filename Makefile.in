# Configuration

VERSION = @PACKAGE_VERSION@

OCAMLOPT = OCAMLPATH='$(OCAMLPATH)' OCAMLRUNPARAM= ocamlfind ocamlopt
OCAMLC   = OCAMLPATH='$(OCAMLPATH)' OCAMLRUNPARAM= ocamlfind ocamlc
OCAMLDEP = OCAMLPATH='$(OCAMLPATH)' OCAMLRUNPARAM= ocamlfind ocamldep
CPPO = cppo
QTEST = qtest
WARNS = -w -40-58+27

OCAMLOPTFLAGS = @OCAMLOPTFLAGS@ $(WARNS) -annot
OCAMLCFLAGS =   @OCAMLCFLAGS@   $(WARNS)

ifdef NDEBUG
OCAMLOPTFLAGS += -noassert -O2
else
OCAMLOPTFLAGS += -g
endif

PACKAGES = \
	batteries stdint

META_REQUIRES = \
	findlib $(PACKAGES)

INSTALLED_LIB = \
	dessser.cmxa \
	dessser.cma \
	dessser.a \
	$(filter %.cmi, $(LIBDESSSER_SOURCES:.ml=.cmi)) \
	$(filter %.cmx, $(LIBDESSSER_SOURCES:.ml=.cmx)) \
	$(filter %.cmo, $(LIBDESSSER_SOURCES:.ml=.cmo))

INSTALLED_HEADERS = \
	src/dessser/runtime.h \
	src/dessser/typedefs.h \
	src/dessser/Pointer.h \
	src/dessser/Bytes.h \
	src/dessser/Vec.h

INSTALLED = \
	$(INSTALLED_LIB) \
	$(INSTALLED_HEADERS) \
	META

prefix = @prefix@
exec_prefix = @exec_prefix@
bindir ?= @bindir@

all: $(INSTALLED) examples

# Generic rules

.SUFFIXES: .ml .mli .mlo .cmi .cmx .cmo .cmt .html .adoc
.PHONY: \
  clean distclean all dep doc examples \
  check unit-check \
  install uninstall reinstall

%.cmi: %.mli
	@echo 'Compiling $@ (interface)'
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -I $(dir $@) -package '$(PACKAGES)' -c $<

%.cmx %.cmt: %.ml
	@echo 'Compiling $@'
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -I $(dir $@) -package '$(PACKAGES)' -c $<

%.cmo: %.ml
	@echo 'Compiling $@'
	$(OCAMLC) $(OCAMLCFLAGS) -I $(dir $@) -package '$(PACKAGES)' -c $<

%.ml: %.mlo
	@echo "Preprocessing $@"
	$(CPPO) $< -o $@

# Documentation

%.html: %.adoc
	@echo 'Building documentation $@'
	asciidoc -a data-uri -a icons -a toc -a max-width=55em --theme volnitsky -o $@ $<

doc:

LIBDESSSER_SOURCES = \
	src/Dessser.ml \
	src/SExpr.ml \
	src/RowBinary.ml \
	src/DevNull.ml \
	src/BackEndCPP.ml \
	src/BackEndOCaml.ml \
	src/RamenRingBuffer.ml \
	src/HeapValue.ml \
	src/DessserOCamlBackendHelpers.ml

EXAMPLES_SOURCES = \
	examples/manual_codegen.ml

TESTONLY_SOURCES =

SOURCES = $(sort \
	$(LIBDESSSER_SOURCES) \
	$(EXAMPLES_SOURCES) \
	$(TESTONLY_SOURCES) \
)

# Dependencies

dep:
	@$(RM) .depend
	@$(MAKE) .depend

.depend: $(SOURCES)
	@$(OCAMLDEP) -I src -package '$(PACKAGES)' $(filter %.ml, $(LIBDESSSER_SOURCES)) $(filter %.mli, $(LIBDESSSER_SOURCES)) >> $@

include .depend

# Compile dessser lib

src/dessser.cmxa: $(LIBDESSSER_SOURCES:.ml=.cmx)
	@echo 'Linking runtime library $@ (native)'
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -I src -a $(filter %.cmx, $^) -o $@

src/dessser.cma: $(LIBDESSSER_SOURCES:.ml=.cmo)
	@echo 'Linking runtime library $@ (bytecode)'
	$(OCAMLC) $(OCAMLCFLAGS) -I src -a $(filter %.cmo, $^) -o $@

src/dessser.a: src/dessser.cmxa

INSTALLED_IMPL = src

dessser.cmxa: $(INSTALLED_IMPL)/dessser.cmxa
	@ln -f $< $@

dessser.cma: $(INSTALLED_IMPL)/dessser.cma
	@ln -f $< $@

dessser.a: $(INSTALLED_IMPL)/dessser.a
	@ln -f $< $@

# Compile examples

examples: $(EXAMPLES_SOURCES:%.ml=%.opt)

# Compile another exxperiment

examples/manual_codegen.opt: src/dessser.cmxa examples/manual_codegen.ml
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -I src -linkpkg -package '$(PACKAGES)' $^ -o $@

# Generated sources

META: Makefile
	@echo 'Building findlib configuration (META) for Ramen'
	@echo 'description = "(de)serializer generator"' > $@
	@echo 'version = "$(VERSION)"' >> $@
	@echo 'archive(native) = "dessser.cmxa"' >> $@
	@echo 'archive(byte) = "dessser.cma"' >> $@
	@echo 'requires = "$(META_REQUIRES)"' >> $@

# Tests

check: examples/manual_codegen.opt
	examples/manual_codegen.opt ocaml
	examples/manual_codegen.opt c++

# Installation

install: $(INSTALLED)
	ocamlfind install dessser $(INSTALLED)

uninstall:
	ocamlfind remove dessser

reinstall: uninstall install

# Packaging

# Cleaning

clean:
	@echo 'Cleaning'
	@$(RM) src/*.s src/*.annot src/*.cmt src/*.cmti src/*.o src/*.opt src/*.byte
	@$(RM) src/*.cmx src/*.cmo src/*.cmxa src/*.cma src/*.cmxs src/*.cmi src/*.a
	@$(RM) examples/*.s examples/*.annot examples/*.cmt examples/*.cmti examples/*.o examples/*.opt examples/*.byte
	@$(RM) examples/*.cmx examples/*.cmo examples/*.cmxa examples/*.cma examples/*.cmxs examples/*.cmi examples/*.a
	@$(RM) *.opt perf.data* gmon.out

distclean: clean
	@echo 'Cleaning all build files'
	@$(RM) META
